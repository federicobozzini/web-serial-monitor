{"version":3,"sources":["App.tsx","serviceWorker.ts","index.js","SerialMonitor.js"],"names":["App","serialMonitor","useState","history","active","serialOutput","updateSerialOutput","isConnected","updateIsConnected","error","updateError","useEffect","onRead","onConnectionEvent","connected","onClick","a","disconnect","connect","id","disabled","onChange","e","setBaudRate","target","value","defaultValue","baudRate","map","r","i","key","length","o","Boolean","window","location","hostname","match","navigator","serial","activeOutput","outputHistory","this","Error","requestPort","port","open","baudrate","connectionCallback","decoder","TextDecoderStream","inputDone","readable","pipeTo","writable","inputStream","reader","getReader","read","done","readCallback","push","releaseLock","cancel","catch","undefined","outputStream","getWriter","close","cb","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.79ad1acb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { SerialMonitor } from \"./SerialMonitor\";\n\ninterface AppProps {\n  readonly serialMonitor: SerialMonitor;\n}\n\nfunction App({ serialMonitor }: AppProps) {\n  const baudRates = [9600, 14400, 19200, 28800, 38400, 56000, 57600, 115200];\n  const [serialOutput, updateSerialOutput] = useState({\n    history: [],\n    active: \"\",\n  });\n  const [isConnected, updateIsConnected] = useState(false);\n  const [error, updateError] = useState(\"\");\n\n  useEffect(() => {\n    serialMonitor.onRead(updateSerialOutput);\n    serialMonitor.onConnectionEvent((connected: boolean) => {\n      updateIsConnected(connected);\n      updateError(\"\");\n    });\n  }, [serialMonitor]);\n\n  const onClick = async () => {\n    try {\n      if (isConnected) {\n        await serialMonitor.disconnect();\n      } else {\n        await serialMonitor.connect();\n      }\n    } catch (e) {\n      updateError(`An error happened: \"${e}\"`);\n    }\n  };\n  return (\n    <div id=\"app\">\n      <div id=\"settings\">\n        <label>\n          Baud Rate:\n          <select\n            disabled={isConnected}\n            onChange={(e) => serialMonitor.setBaudRate(+e.target.value)}\n            defaultValue={serialMonitor.baudRate}\n          >\n            {baudRates.map((r, i) => (\n              <option key={i} value={r}>\n                {r}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n      <div id=\"connect\">\n        <button onClick={() => onClick()}>\n          {isConnected ? \"Disconnect\" : \"Connect\"}\n        </button>\n      </div>\n      <div id=\"serial-output\">\n        {serialOutput.history.length > 0 && (\n          <div id=\"history\">\n            {serialOutput.history.map((o, i) => (\n              <div key={i}>{o}</div>\n            ))}\n          </div>\n        )}\n        <div id=\"active\">{serialOutput.active}</div>\n        <div id=\"error\">{error}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { SerialMonitor } from './SerialMonitor';\n\nif (!('serial' in navigator)) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <div id=\"compatibility-error\">\n        <div>Web Serial is not supported by your browser.</div>\n        <div>Make sure you're running Chrome 78 or later and have enabled the #enable-experimental-web-platform-features flag in chrome://flags</div>\n      </div>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\nelse {\n  const serial = navigator.serial;\n  const serialMonitor = new SerialMonitor(serial);\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <App serialMonitor={serialMonitor}/>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister();\n}","/*global TextDecoderStream*/\n\nexport class SerialMonitor {\n\n  baudRate = 9600;\n  port;\n  serial;\n  reader;\n  inputDone;\n  readCallback;\n  connectionCallback;\n  activeOutput = \"\";\n  outputHistory = [];\n\n  constructor(serial) {\n    this.serial = serial;\n  }\n\n  async connect() {\n    if (!this.serial) {\n      throw Error(\"Connection: missing Serial object\");\n    }\n    this.port = await this.serial.requestPort();\n    await this.port.open({ baudrate: this.baudRate });\n    this.connectionCallback(true);\n    const decoder = new TextDecoderStream();\n    this.inputDone = this.port.readable.pipeTo(decoder.writable);\n    const inputStream = decoder.readable;\n\n    this.reader = inputStream.getReader();\n    while (true) {\n      const { value, done } = await this.reader.read();\n      if (value) {\n        this.activeOutput += value;\n        this.readCallback({ history: this.outputHistory, active: this.activeOutput, });\n      }\n      if (done) {\n        this.outputHistory.push(this.activeOutput);\n        this.activeOutput = \"\";\n        this.readCallback({ history: this.outputHistory, active: this.activeOutput, });\n        this.reader.releaseLock();\n        break;\n      }\n    }\n  }\n\n  async disconnect() {\n    if (!this.serial) {\n      throw Error(\"Disconnection: missing Serial object\");\n    }\n    if (this.reader) {\n      await this.reader.cancel();\n      await this.inputDone.catch(() => {});\n      this.reader = undefined;\n      this.inputDone = undefined;\n    }\n    if (this.outputStream) {\n      await this.outputStream.getWriter().close();\n      this.outputStream = undefined;\n    }\n    await this.port.close();\n    this.port = undefined;\n    this.connectionCallback(false);\n  }\n\n  setBaudRate(baudRate) {\n    this.baudRate = baudRate;\n  }\n\n  onConnectionEvent(cb) {\n    this.connectionCallback = cb;\n  }\n\n  onRead(cb) {\n    this.readCallback = cb;\n  }\n}\n"],"sourceRoot":""}